# .github/workflows/main.yaml
name: Smart DevSecOps CI/CD Pipeline

# Déclencheur : ce pipeline se lancera à chaque push sur la branche "main"
on:
  push:
    branches: [ "main" ]

jobs:
  # Premier Job : Construire, Tester et Pousser l'image Docker
  build-and-test:
    runs-on: ubuntu-latest # Ce job tournera sur une machine virtuelle Linux fournie par GitHub

    steps:
      # Étape 1 : Récupérer le code de votre dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # ===================================================================
      # == ESPACE RÉSERVÉ POUR LE TRAVAIL DE MEMBRE 2 (SHIFT-LEFT) ==
      # Plus tard, nous insérerons ici les blocs de code pour Semgrep,
      # Gitleaks, et les autres outils d'analyse statique.
      # Chaque étape sera une "action" du GitHub Marketplace.
      # exemple :
      # - name: Run Semgrep SAST Scan
      #   uses: semgrep/semgrep-action@v1
      # ===================================================================

      # Étape 2 : Se connecter au registre de conteneurs de GitHub
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Étape 3 : Construire l'image Docker et la pousser sur le registre
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app-bancaire # Le Dockerfile se trouve dans ce dossier
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/banking-api:${{ github.sha }}

  # =======================================================================
  # == JOB FUTUR : DÉPLOYER ==
  # Dans la Phase 2, nous ajouterons un deuxième job ici qui ne se
  # lancera que si "build-and-test" a réussi. Il se chargera du
  # déploiement sur Kubernetes et des tests DAST (OWASP ZAP).
  #
  # deploy:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to Kubernetes
  #       ...
  # =======================================================================