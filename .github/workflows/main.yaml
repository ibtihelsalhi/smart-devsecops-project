# .github/workflows/main.yaml
name: Smart DevSecOps CI/CD Pipeline

# Déclencheur : se lance sur les push ET les pull requests vers la branche "main"
# C'est une meilleure pratique pour vérifier le code AVANT de le fusionner.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job unique qui intègre la sécurité, le build et le push
  security-build-and-push:
    runs-on: ubuntu-latest
    name: Analyse de Sécurité et Build de l'Image

    steps:
      # Étape 1 : Récupérer le code de votre dépôt
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Récupère tout l'historique pour que Gitleaks puisse scanner les anciens commits
          fetch-depth: 0

      # ===================================================================
      # == PHASE DE SÉCURITÉ "SHIFT-LEFT" (INTÉGRATION DU TRAVAIL DE MEMBRE 2) ==
      # Chaque étape est bloquante. Si l'une échoue, le pipeline s'arrête.
      # ===================================================================

      - name: 'SECURITY: Détection de Secrets avec Gitleaks'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Pas de "continue-on-error", l'action échouera et arrêtera le job si un secret est trouvé.

      - name: 'SECURITY: Analyse Statique du Code (SAST) avec Semgrep'
        uses: semgrep/semgrep-action@v1
        with:
          config: "auto" # "auto" applique les règles pertinentes et bloque en cas de découverte.

      - name: 'SECURITY: Analyse des Dépendances (SCA) avec Trivy'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './app-bancaire'
          ignore-unfixed: true
          format: 'table' # Affiche un joli tableau dans les logs
          severity: 'CRITICAL,HIGH' # Le pipeline échouera pour les vulnérabilités CRITIQUES ou ÉLEVÉES.

      - name: 'SECURITY: Analyse d"Infrastructure as Code (IaC) avec Checkov'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./kubernetes
          # Par défaut, l'action est bloquante en cas d'erreur de configuration.
          soft_fail: false 

      # ===================================================================
      # == PHASE DE BUILD (Ne s'exécute que si les scans de sécurité ont réussi) ==
      # ===================================================================

      - name: 'Se connecter au GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Construire et pousser l"image Docker'
        uses: docker/build-push-action@v5
        with:
          context: ./app-bancaire
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/banking-api:${{ github.sha }}
          
      # ===================================================================
      # == BONUS SÉCURITÉ : Analyse de l'image Docker après le build ==
      # ===================================================================

      - name: 'SECURITY: Scanner l"image Docker construite avec Trivy'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'ghcr.io/${{ github.repository_owner }}/banking-api:${{ github.sha }}'
          format: 'table'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # =======================================================================
  # == JOB FUTUR : DÉPLOYER ==
  # =======================================================================
  deploy:
    # Ce job ne se lancera que si "security-build-and-push" a réussi.
    needs: security-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 'Tâche de déploiement future'
        run: echo "Déploiement sur Kubernetes..."
